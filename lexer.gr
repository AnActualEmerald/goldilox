import String from "string"
import List from "list"
import { toString } from "char"
import { report } from "./error"

export enum TokenType {
  //brackets and such
  RParen,
  LParen,
  RBrace,
  LBrace,
  RSquare,
  LSquare,
  Comma,
  //binary operators
  Plus,
  Minus,
  Star,
  Dot,
  Equal,
  Slash,
  //unary operators
  Bang,
  //boolean operators
  And,
  Or,
  Xor,
  True,
  False,
  BangEqual,
  EqualEqual,
  Greater,
  Less,
  GreaterEqual,
  LessEqual,
  //Literals
  String(String),
  Number(Number),
  Ident(String),
  Semicolon,
  EOF,
}

export record Token {
  token_type: TokenType,
  text: String,
  line: Number,
}

let mut start = 0
let mut current = 0
let mut line = 1
let mut source = ""
let mut tokens = []

let isAtEnd = () => {
  current >= String.length(source)
}

let addToken = t => {
  let text = String.slice(start, current, source)
  let tok = { token_type: t, text, line }
  tokens = List.append(tokens, [tok])
}

let advance = () => {
  let c = String.charAt(current, source)
  current += 1
  c
}

//Check if the next character matches, and consume it if it does
let nibble = e => {
  let mut res = true
  if (isAtEnd()) {
    res = false
  } else if (String.charAt(current, source) != e) {
    res = false
  } else {
    current += 1
  }

  res
}

//Get the next character without consuming it
let peek = () => {
  if (isAtEnd()) {
    '\0'
  } else {
    String.charAt(current, source)
  }
}

let scanToken = () => {
  let c = advance()
  match (c) {
    '(' => addToken(LParen),
    ')' => addToken(RParen),
    '{' => addToken(LBrace),
    '}' => addToken(RBrace),
    '[' => addToken(LSquare),
    ']' => addToken(RSquare),
    '.' => addToken(Dot),
    ',' => addToken(Comma),
    '-' => addToken(Minus),
    '+' => addToken(Plus),
    '*' => addToken(Star),
    ';' => addToken(Semicolon),
    '=' => {
      if (nibble('=')) {
        addToken(EqualEqual)
      } else {
        addToken(Equal)
      }
    },
    '!' => addToken(if (nibble('=')) BangEqual else Bang),
    '<' => addToken(if (nibble('=')) LessEqual else Less),
    '>' => addToken(if (nibble('=')) GreaterEqual else Greater),
    '/' => {
      if (nibble('/')) {
        //ignore the comment until the end of the line
        while (peek() != '\n' && !isAtEnd()) {
          advance()
          void //don't want to return the character here
        }
      } else {
        addToken(Slash)
      }
    },
    '\n' => line += 1,
    //ignore whitespace
    ' ' => void,
    '\r' => void,
    '\t' => void,
    _ => {
      report(line, "Unrecognized token " ++ toString(c))
    },
  }
}

//Loop through each character in the source string
export let scanTokens = src => {
  source = src

  while (!isAtEnd()) {
    start = current
    scanToken()
  }

  List.append(tokens, [{ token_type: EOF, text: "", line }])

  tokens
}
