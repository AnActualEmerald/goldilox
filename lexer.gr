import String from "string"
import List from "list"
import Char, { code } from "char"
import { report } from "./error"
import { parseInt } from "number"
import { expect } from "result"
import Array from "array"

export enum TokenType {
  //brackets and such
  RParen,
  LParen,
  RBrace,
  LBrace,
  RSquare,
  LSquare,
  Comma,
  //binary operators
  Plus,
  Minus,
  Star,
  Dot,
  Equal,
  Slash,
  //unary operators
  Bang,
  //boolean operators
  And,
  Or,
  Xor,
  True,
  False,
  BangEqual,
  EqualEqual,
  Greater,
  Less,
  GreaterEqual,
  LessEqual,
  //Literals
  String(String),
  Number(Number),
  Ident(String),
  Semicolon,
  EOF,
}

export record Token {
  token_type: TokenType,
  text: String,
  line: Number,
}

let mut start = 0
let mut current = 0
let mut line = 1
let mut source = ""
let mut tokens = []

let isAtEnd = () => {
  current >= String.length(source)
}

let addToken = t => {
  let text = String.slice(start, current, source)
  let tok = { token_type: t, text, line }
  tokens = List.append(tokens, [tok])
}

let advance = () => {
  let c = String.charAt(current, source)
  current += 1
  c
}

//Check if the next character matches, and consume it if it does
let nibble = e => {
  let mut res = true
  if (isAtEnd()) {
    res = false
  } else if (String.charAt(current, source) != e) {
    res = false
  } else {
    current += 1
  }

  res
}

//Get the next character without consuming it
let peek = () => {
  if (isAtEnd()) {
    '\0'
  } else {
    String.charAt(current, source)
  }
}

let peekNext = () => {
  if (isAtEnd()) {
    '\0'
  } else {
    String.charAt(current + 1, source)
  }
}

let isDigit = c => {
  code(c) >= code('0') && code(c) <= code('9')
}

let makeString = () => {
  while (peek() != '"' && !isAtEnd()) {
    if (peek() == '\n') {
      line += 1
    }
    advance()
    void
  }
  if (isAtEnd()) {
    report(line, "Unterminated string - unecpected EOF")
  } else {
    //consume the closing '"'
    advance()
    let lit = String.slice(start + 1, current - 1, source)
    addToken(String(lit))
  }
}

let makeNumber = () => {
  while (isDigit(peek())) {
    advance()
    void
  }
  //grain's stdlib can only parse ints right now so we'll do the integer and fractional parts separately
  let mut num = expect(
    "Unable to parse number at " ++ toString(line),
    parseInt(String.slice(start, current, source), 10)
  )
  if (peek() == '.' && isDigit(peekNext())) {
    //consume the .
    advance()
    let fracStart = current
    while (isDigit(peek())) {
      advance()

      void
    }
    let slice = String.slice(fracStart, current, source)
    let dec = expect(
      "Unable to parse number at " ++ toString(line),
      parseInt(slice, 10)
    )

    //weird hack-y workaround for no exponent function idk if this is bad or not
    let e = Array.reduce((b, a) => b * a,
    1,
    Array.init(current - fracStart, c => 10)
    )
    num += dec / e
  }
  print(num)
  addToken(Number(num))
}

let rec scanToken = () => {
  let c = advance()
  match (c) {
    '(' => addToken(LParen),
    ')' => addToken(RParen),
    '{' => addToken(LBrace),
    '}' => addToken(RBrace),
    '[' => addToken(LSquare),
    ']' => addToken(RSquare),
    '.' => addToken(Dot),
    ',' => addToken(Comma),
    '-' => addToken(Minus),
    '+' => addToken(Plus),
    '*' => addToken(Star),
    ';' => addToken(Semicolon),
    '=' => {
      if (nibble('=')) {
        addToken(EqualEqual)
      } else {
        addToken(Equal)
      }
    },
    '!' => addToken(if (nibble('=')) BangEqual else Bang),
    '<' => addToken(if (nibble('=')) LessEqual else Less),
    '>' => addToken(if (nibble('=')) GreaterEqual else Greater),
    '/' => {
      if (nibble('/')) {
        //ignore the comment until the end of the line
        while (peek() != '\n' && !isAtEnd()) {
          advance()
          void //don't want to return the character here
        }
      } else {
        addToken(Slash)
      }
    },
    '"' => {
      makeString()
    },
    '\n' => line += 1,
    //ignore whitespace
    ' ' => void,
    '\r' => void,
    '\t' => void,
    c => {
      if (isDigit(c)) {
        makeNumber()
      } else {
        report(line, "Unrecognized token " ++ toString(c))
      }
    },
  }
}

//Loop through each character in the source string
export let scanTokens = src => {
  start = 0
  current = 0
  line = 1
  tokens = []
  source = src

  while (!isAtEnd()) {
    start = current
    scanToken()
  }

  List.append(tokens, [{ token_type: EOF, text: "", line }])

  tokens
}
