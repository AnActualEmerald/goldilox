import { readFile } from "./file"
import { hadError } from "./error"
import { argv } from "sys/process"
import { expect } from "result"
import { reverse, get, some, length } from "array"
import { endsWith } from "string"
import Console from "./console"

//putting this first causes a cyclical dependency for some reason
import Lexer from "./lexer"

let args = expect("Unable to get command line args", argv())

// print("hello world")
//can't get the file reading to work idk

let run = source => {
  let tokens = Lexer.scanTokens(source)
  //don't actually run any code if there was an error
  if (!hadError) {
    print(tokens)
  }
}

let runPrompt = () => {
  print("goldilox REPL 9000")
  while (true) {
    Console.prit(">>> ")
    let input = Console.readLine()
    if (input == "exit" || input == "quit") {
      break
    }
    run(input)
  }
}

if (some(a => endsWith(".lox", a), args)) {
  //use the last argument from the command line for simplicity
  let f = get(length(args) - 1, args)
  match (readFile(f)) {
    Ok(s) => {
      run(s)
    },
    Err(e) => {
      print(e)
    },
  }
} else {
  runPrompt()
}
