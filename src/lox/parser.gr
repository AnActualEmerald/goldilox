import { forEach } from "list"
import { unwrap } from "result"
import Array from "array"
import Lexer from "./lexer"
import Expr from "./expr"
import Error from "../util/error"

let mut tokens: Array<Lexer.Token> = [>]
let mut current = 0

let error = (token: Lexer.Token, msg) => {
  Error.report_raw(
    "[line " ++ toString(token.line) ++ " at '" ++ token.text ++ "']: " ++ msg
  )
}

let previous = () => {
  tokens[current - 1]
}

let peek = () => {
  tokens[current]
}

let isAtEnd = () => {
  peek().token_type == Lexer.EOF
}

let advance = () => {
  if (!isAtEnd()) {
    current += 1
  }
  previous()
}

let check = t => {
  if (isAtEnd()) {
    false
  } else {
    peek().token_type == t
  }
}

let within = types => {
  let mut ret = false
  forEach(el => {
    if (check(el) && !ret) {
      ret = true
      advance()
      void
    }
  }, types)

  ret
}

let consume = (ex, msg) => {
  if (check(ex)) {
    Ok(advance())
  } else {
    error(peek(), msg)
    Err(msg)
  }
}

//this seems inefficient but I don't know how else to make `expression` callable from the top of the grammar
let rec expression = () => {
  let primary = () => {
    let mut ret = Err("prim")
    if (within([Lexer.False])) {
      ret = Ok(Expr.BoolLiteral(false))
    } else if (within([Lexer.True])) {
      ret = Ok(Expr.BoolLiteral(true))
    } else if (within([Lexer.Nil])) {
      ret = Ok(Expr.NilLiteral)
    } else {
      let t = peek()
      match (t.token_type) {
        Lexer.String(s) => {
          advance()
          ret = Ok(Expr.StringLiteral(s))
        },
        Lexer.Number(n) => {
          advance()
          ret = Ok(Expr.NumLiteral(n))
        },
        _ => {
          if (within([Lexer.LParen])) {
            match (expression()) {
              Ok(e) => {
                match (consume(Lexer.RParen, "Expect ')' after exression.")) {
                  Ok(_) => {
                    ret = Ok(Expr.Grouping(e))
                  },
                  Err(m) => {
                    ret = Err(m)
                  },
                }
              },
              Err(e) => ret = Err(e),
            }
          }
        },
      }
    }
    ret
  }

  let rec unary = () => {
    if (within([Lexer.Bang, Lexer.Minus])) {
      let op = previous()
      let mut ret = Err("un")
      match (unary()) {
        Ok(right) => {
          ret = Ok(Expr.Unary(op, right))
        },
        Err(e) => {
          ret = Err(e)
        },
      }
      ret
    } else {
      primary()
    }
  }

  let factor = () => {
    let mut ret = Err("fact")
    match (unary()) {
      Ok(e) => {
        ret = Ok(e)

        while (within([Lexer.Slash, Lexer.Star])) {
          let op = previous()
          match (unary()) {
            Ok(right) => {
              ret = Ok(Expr.Binary(e, op, right))
            },
            Err(m) => ret = Err(m),
          }
        }
      },
      Err(e) => {
        ret = Err(e)
      },
    }

    ret
  }

  let term = () => {
    let mut ret = Err("term")
    match (factor()) {
      Ok(e) => {
        ret = Ok(e)
        while (within([Lexer.Minus, Lexer.Plus])) {
          let op = previous()
          match (factor()) {
            Ok(right) => {
              ret = Ok(Expr.Binary(e, op, right))
            },
            Err(m) => ret = Err(m),
          }
        }
      },
      Err(e) => {
        ret = Err(e)
      },
    }

    ret
  }

  let comparison = () => {
    let mut ret = Err("comp")

    match (term()) {
      Ok(e) => {
        ret = Ok(e)
        while (
          within(
            [Lexer.Greater, Lexer.GreaterEqual, Lexer.Less, Lexer.LessEqual]
          )
        ) {
          let op = previous()
          match (term()) {
            Ok(right) => {
              ret = Ok(Expr.Binary(e, op, right))
            },
            Err(m) => ret = Err(m),
          }
        }
      },
      Err(e) => {
        ret = Err(e)
      },
    }

    ret
  }

  let equality = () => {
    let mut ret = Err("eq")
    match (comparison()) {
      Ok(e) => {
        ret = Ok(e)
        while (within([Lexer.BangEqual, Lexer.EqualEqual])) {
          let op = previous()
          match (comparison()) {
            Ok(right) => {
              ret = Ok(Expr.Binary(e, op, right))
            },
            Err(m) => ret = Err(m),
          }
        }
      },
      Err(e) => {
        ret = Err(e)
      },
    }

    ret
  }

  equality()
}

let syncronize = () => {
  advance()
  let mut ret = false
  while (!isAtEnd()) {
    if (previous().token_type == Lexer.Semicolon) {
      ret = true
      break
    }

    match (peek().token_type) {
      Lexer.Class | Lexer.Fun | Lexer.Var | Lexer.For | Lexer.If | Lexer.While |
      Lexer.Print |
      Lexer.Return => {
        ret = true
        break
      },
      _ => {
        ignore(advance())
      },
    }
  }

  ret
}

export let parse = ts => {
  tokens = ts
  current = 0
  let mut trees = [>]
  while (!isAtEnd()) {
    match (expression()) {
      Ok(e) => trees = Array.append(trees, [> e]),
      Err(e) => {
        if (syncronize()) {
          continue
        } else {
          break
        }
      },
    }
  }

  trees
}
