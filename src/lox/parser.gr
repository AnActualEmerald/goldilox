import { forEach } from "list"
import Array from "array"
import Lexer from "./lexer"
import Expr from "./expr"

let mut tokens: Array<Lexer.Token> = [>]
let mut current = 0

let previous = () => {
  tokens[current - 1]
}

let peek = () => {
  tokens[current]
}

let isAtEnd = () => {
  peek().token_type == Lexer.EOF
}

let advance = () => {
  if (!isAtEnd()) {
    current += 1
  }
  previous()
}

let check = t => {
  if (isAtEnd()) {
    false
  } else {
    peek().token_type == t
  }
}

let within = types => {
  let mut ret = false
  forEach(el => {
    if (check(el) && !ret) {
      ret = true
      advance()
      void
    }
  }, types)

  ret
}

let consume = (ex, msg) => {
  if (check(ex)) {
    Ok(advance())
  } else {
    //TODO: Report error
    Err(msg)
  }
    
}

//this seems inefficient but I don't know how else to make `expression` callable from the top of the grammar
let rec expression = () => {
  let primary = () => {
    let mut ret = Expr.NilLiteral
    if (within([Lexer.False])) {
      ret = Expr.BoolLiteral(false)
    } else if (within([Lexer.True])) {
      ret = Expr.BoolLiteral(true)
    } else if (within([Lexer.Nil])) {
      ret = Expr.NilLiteral
    } else {
      let t = advance()
      match (t.token_type) {
        Lexer.String(s) => {
          ret = Ok(Expr.StringLiteral(s))
        },
        Lexer.Number(n) => {
          ret = Ok(Expr.NumLiteral(n))
        },
        _ => {
          if (within([Lexer.LParen])) {
            let e = expression()
            match (consume(RParen, "Expect ')' after exression.")){
              Ok(_) => ret = Ok(Expr.Grouping(e))
              Err(m) => ret = Err(m)
            }
          }
        },
      }
    }
    ret
  }

  let rec unary = () => {
    if (within([Lexer.Bang, Lexer.Minus])) {
      let op = previous()
      let right = unary()
      Ok(Expr.Unary(op, right))
    } else {
      primary()
    }
  }

  let factor = () => {
    let mut e = unary()

    while (within([Lexer.Slash, Lexer.Star])) {
      let op = previous()
      match unary() {
        Ok(t) => {
        let right = t
        e = Ok(Expr.Binary(e, op, right))
        },
        Err(m) => e = Err(m)
      }
    }

    e
  }

  let term = () => {
    let mut e = factor()

    while (within([Lexer.Minus, Lexer.Plus])) {
      let op = previous()
      match factor() {
        Ok(t) => {
          let right = factor()
          e = Ok(Expr.Binary(e, op, right))
        },
        Err(m) => e = Err(m)
      }
    }

    e
  }

  let comparison = () => {
    let mut e = term()

    while (
      within([Lexer.Greater, Lexer.GreaterEqual, Lexer.Less, Lexer.LessEqual])
    ) {
      match term(){
        Ok(t) => {
          let op = previous()
          let right = t
          e = Expr.Binary(e, op, right)
        },
        Err(m) => e = Err(m)
      }
    }

    e
  }

  let equality = () => {
    let mut e = comparison()

    while (within([Lexer.BangEqual, Lexer.EqualEqual])) {
      match comparison() {
        Ok(t) => {
          let op = previous()
          let right = comparison()
          e = Expr.Binary(e, op, right)
        },
        Err(m) => e = Err(m)
      }
    }

    e
  }

  equality()
}

export let parse = ts => {
  tokens = ts
  current = 0
  let mut trees = [>]
  while (!isAtEnd()) {
    match expression() {
      Ok(e) => trees = Array.append(trees, [> e]),
      Err(_) => break, //Maybe just keep going when we're able to syncronize
    }
  }

  trees
}
