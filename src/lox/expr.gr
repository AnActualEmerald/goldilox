//Auto generated by generate_ast.hsh
import { Token } from "./lexer"
export enum Expr {
  Binary(Expr, Token, Expr), //Left Operator Right
  Grouping(Expr), //Group
  StringLiteral(String), //Literal
  NumLiteral(Number), //Literal
  BoolLiteral(Bool), //Literal
  NilLiteral,
  Unary(Token, Expr), //Operator Expression
}

//--end generated content--//

import { forEach } from "array"

export let rec prettyFormat = e => {
  let parenthesize = (name, e) => {
    let mut res = "(" ++ name
    forEach(el => {
      res = res ++ " " ++ prettyFormat(el)
      void
    }, e)

    res = res ++ ")"
    res
  }
  match (e) {
    Binary(l, o, r) => parenthesize(o.text, [> l, r]),
    Unary(o, r) => parenthesize(o.text, [> r]),
    Grouping(g) => parenthesize("group", [> g]),
    NumLiteral(n) => toString(n),
    StringLiteral(s) => s,
    BoolLiteral(b) => toString(b),
    NilLiteral => "nil",
  }
}
